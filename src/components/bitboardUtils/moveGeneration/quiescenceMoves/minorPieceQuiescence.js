import { bitScanForward } from "../../bbUtils";
import {
  BLACK_BISHOP,
  BLACK_KNIGHT,
  WHITE,
  WHITE_BISHOP,
  WHITE_KNIGHT,
} from "../../constants";
import { getMovesFromBB } from "../../moveMaking/makeMoveLogic";
import {
  getKnightMovesForSquare,
  getMagicBishopMovesForSquare,
} from "../minorPieceMoveGeneration";

/**
 * Gets the quiescence moves for a knight.
 * @param {BigUint64Array} bitboards - the bitboards in the current position
 * @param {number} player - the player whose move it is (0 for w, 1 for b)
 * @param {bigint} opponentPieces - a bitboard of the opponents pieces
 * @param {bigint} pinnedMask - the mask of pinned pieces for the player
 * @returns {Array<Move>} the move bitboard for the knight
 */
export const knightQuiescence = (
  bitboards,
  player,
  opponentPieces,
  pinnedMask
) => {
  const moves = [];

  const isWhite = player === WHITE;
  const piece = isWhite ? WHITE_KNIGHT : BLACK_KNIGHT;
  let knightBB = bitboards[piece];

  while (knightBB) {
    const from = bitScanForward(knightBB);
    knightBB &= knightBB - 1n;

    // Get raw knight captures
    let moveBB =
      getKnightMovesForSquare(bitboards, player, from, pinnedMask) &
      opponentPieces;

    const knightMoves = getMovesFromBB(
      bitboards,
      moveBB,
      from,
      piece,
      null,
      player
    );

    moves.concat(knightMoves);
  }

  return moves;
};

/**
 * Gets the quiescence moves for a bishop.
 * @param {BigUint64Array} bitboards - the bitboards in the current position
 * @param {number} player - the player whose move it is (0 for w, 1 for b)
 * @param {bigint} opponentPieces - a bitboard of the opponents positions
 * @param {bigint} pinnedMask - the mask of pinned pieces for the player
 * @param {function} getRayMask - function generated by computeRayMaskGenerator
 * @returns {Array<Move>} the move bitboard for the bishop
 */
export const bishopQuiescence = (
  bitboards,
  player,
  opponentPieces,
  pinnedMask,
  getRayMask
) => {
  const moves = [];

  const isWhite = player === WHITE;

  const piece = isWhite ? WHITE_BISHOP : BLACK_BISHOP;

  let bishopBB = bitboards[piece];
  while (bishopBB) {
    const from = bitScanForward(bishopBB);
    bishopBB &= bishopBB - 1n;

    let moveBB =
      getMagicBishopMovesForSquare(
        bitboards,
        player,
        from,
        pinnedMask,
        getRayMask
      ) & opponentPieces;

    const bishopMoves = getMovesFromBB(
      bitboards,
      moveBB,
      from,
      piece,
      null,
      player
    );

    moves.concat(bishopMoves);
  }

  return moves;
};
